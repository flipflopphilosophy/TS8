name: CI Workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-notify:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # SonarQube Scan
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: -X  # Enable debug logging for SonarScanner

    # Optionally, fail the job if the Quality Gate fails
    # - name: SonarQube Quality Gate Check
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   timeout-minutes: 5
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Use OpenAI Matching Token
      env:
        GH_TOKEN: ${{ secrets.OPEN_AIMATCHING }}
      run: |
        curl -H "Authorization: token $GH_TOKEN" https://api.github.com/user/repos

    - name: Log Slack Webhook URL existence
      run: |
        if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          echo "SLACK_WEBHOOK_URL secret is not set."
        else
          echo "SLACK_WEBHOOK_URL secret is set."
        fi

    - name: Notify Slack
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Hello, World!"}' $SLACK_WEBHOOK_URL